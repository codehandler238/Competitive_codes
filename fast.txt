/* FAST INPUT AND OUTPUT */
inline int input()
{
        int n = 0;
        int ch = getchar_unlocked();
        while (ch < '0' || ch > '9') ch = getchar_unlocked();
        while (ch >= '0' && ch <= '9') {
                n = (n << 3) + (n << 1) + (ch - '0');
                ch = getchar_unlocked();
        }
        return n;

}
inline void output(lli a)
{
        char snum[20];
        int i=0;
        do
        {
                snum[i++]=a%10+48;
                a=a/10;
        }while(a!=0);
        i=i-1;
        while(i>=0)
                putchar_unlocked(snum[i--]);
        putchar_unlocked('\n');

}

/* FOR REVERSE MODULO OF NUMBER 'a' IN 'm' */
int GCDW(lli a, lli b, lli & l, lli & k) {
        if (!a) {
                l = 0;
                k = 1;
                return b;
        }
        int d = GCDW(b % a, a, k, l);
        l -= (b / a) * k;
        return d;
}
lli RevMod(lli a, lli m)
{
        lli x, y;
        if (GCDW(a, m, x, y) != 1) return -1;
        x %= m;
        if (x < 0) x += m;
        return x;
}

{
        int i,j,k,m,n,t,l;

        for(i=0;i<MAX;i++)
                arr[i]=i+2;

        for(i=0;i<MAX;i++)
        {
                if(arr[i]!=0)
                {
                        m=1;
                        while(m*arr[i]+i<=MAX-2)
                        {
                                arr[m*arr[i]+i]=0;
                                m++;
                        }
                }
        }
}
In case of priority queue of structure.
struct node{
        int a,b;
        bool operator<(const struct node &c)const{
                return b<c.b;
        }
};

kth fibbonaci number-
f(2 * k) = f(k) * f(k) + f(k - 1) * f(k - 1)
f(2 * k + 1) = f(k) * f(k + 1) + f(k - 1) * f(k)

